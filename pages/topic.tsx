import Head from 'next/head'
import Image from 'next/image'
import Footer from '../components/footer'
import WebHeadder from '../components/WebHeadder'
import styles from '../styles/Topic.module.css'
import { Tabs, TabList, TabPanels, Tab, TabPanel, ChakraProvider } from '@chakra-ui/react'

export default function Topic({ data, topics, pages, curpa }: any) {

  return (
    <ChakraProvider>
      <main className={styles.main}>
        <Head>
          <title>NewsNugget</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=600" />
          <link rel="icon" href="/favicon.png" type='image/png' />
        </Head>

        <WebHeadder page="topics" />

        <section className={styles.container}>
          <h1 className={styles.title}>{topics}</h1>
          {
            data.map((data2: any, index: number) => (
              <article onClick={() => {window.location.assign(`/story?title="${data2["title"]}"`)}} className={styles.article}>
                <Image
                  loader={() => data2.banner_url}
                  className={styles.banner}
                  alt='Image of the event'
                  src={data2.banner_url}
                  width={1280}
                  height={720}
                  loading="lazy"
                />   

                <div style={{alignSelf: "center"}}>

                  <div className={styles.more_info}>
                    <section className={styles.topic}>{topics}</section>
                    <h1 className={styles.published}>Published: {data2.posted_time}</h1>
                  </div>

                  <h1 className={styles.article_title}>{data2.title}</h1>
                  <p className={styles.article_p}>{data2.subtitle}</p>
                </div>
              </article>
            ))
          }        

          {
            pages != 0 ?
              <Tabs variant='soft-rounded' colorScheme='orange' defaultIndex={Number(curpa)}>
                <TabList>
                  {
                    [...Array(pages)].map((x, i) => (
                      <Tab onClick={() => window.location.assign(`/topic?topic=Tech&offset=${5 * i}&curpa=${i}`)}>Page {i}</Tab>
                    ))
                  }
                </TabList>
              </Tabs>
            :
              null
          }
        </section>

        <Footer />
      </main>      
    </ChakraProvider>
  )
}

export async function getServerSideProps({ query }: any) {
    // GET TITLE
    let topic = query.topic
    let offset = query.curpa ? query.offset : 0

    // curpa = current page
    let curpa = query.curpa ? query.curpa : 0
  
    // FIND POST
    const { Client } = require('pg')
  
    const client = new Client({
      host: '161.35.30.10',
      port: 5432,
      database: "NewsNugget",
      user: 'api',
      password: 'M8CZEYvHLg2huCWEeFDSOPr2LDQA8T8b1G0oO8fhUNc2BkvSFGKEQDYOmWyuvGzc7fU865jnmeJ8rTbq2EltEc79mfKUSJWZhXGlqohSD5HcVCn7gpH91H6XqC5Qa0e6fh227KLKoIL7PKhj6WS0TnhGdS05XiKRu2uZdpdY47JqRxs5m2wZP7P9FrNTp0ISDOSD5TDJVc2Oe5TpCcbW2OYjqWOifHVFq98ZZSSE7L8GfvwwkMfEjJNxm1PQyqdP47cSzJ27ScV2R2M5RGZcR5Dq1w46Cr3TDeiNztMobW0iub7c7Wp2OXhlzO5KV5EEFM7fdPuW4gikmHS3fVaoZeKajGCqb7',
    })
    await client.connect()
  
    const res = await client.query('SELECT * FROM website.blog_posts WHERE topic=$1 ORDER BY posted_time DESC LIMIT 5 OFFSET $2', [topic, offset])
    let pages = await client.query('SELECT COUNT(*) FROM website.blog_posts WHERE topic=$1', [topic])
    pages = Math.round(pages.rows[0].count / 5)

    await client.end()
  
    return { props: {
      data: res.rows,
      topics: topic,
      pages: pages,
      curpa: curpa
    }}
  }